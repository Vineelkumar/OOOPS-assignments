We are trying to build a game that contains blocks

Task 1 : 

Input:
[1, 2]

Output:
1
2
vineel
---------------------------------------------------

class Block:
    def __init__(self, value):
        self._value = value
    @property
    def value(self):
        return self._value
    # TODO: write your code here
    pass


if __name__ == "__main__":
    import json
    input_args = json.loads(input())

    block_one = Block(input_args[0])
    block_two = Block(input_args[1])
    
    try:
        block_one._value
    except AttributeError:
        print("Missed protecting value")

    try:
        block_one.value = 1
        print("Missed setting safe access to value")
    except AttributeError:
        pass

    print(block_one.value)
    print(block_two.value)
    
 *---------------------------------------------------*
 
 
 Task 2:
 
 Input:
12


Output:
+--+
|12|
+--+


---------------------------------------------------

class Block:
    def __init__(self, value):
        self._value = value
    @property
    def value(self):
        return self._value
    
    def __str__(self):
        length = len(str(self._value))
        symbol = length*'-'
        return f"+{symbol}+\n|{self._value}|\n+{symbol}+"
    # TODO: write your code here
    pass


if __name__ == "__main__":
    block_value = int(input())
    
    block_one = Block(block_value)
    
    print(block_one)
    
*--------------------------------------------------------*

Task 3:

Input:
[2, 2]

Output:
True
4


---------------------------------------------------

class Block:
    def __init__(self, value = 0):
        self._value = value
    @property
    def value(self):
        return self._value
        
    def __add__(self, other):
        if self._value == other._value:
            return Block(self._value + other._value)
        else:
            print("Cannot add blocks with different values")
    # TODO: write your code here
    pass


if __name__ == "__main__":
    import json

    input_args = json.loads(input())

    block_one = Block(input_args[0])
    block_two = Block(input_args[1])
    
    block_result = block_one + block_two

    print(isinstance(block_result, Block))
    if isinstance(block_result, Block):
        print(block_result.value)
        
  *-----------------------------------------------------*
  
  Task 4:
  
  Input:
[2,2]


Output:
True
True
True
False
4


---------------------------------------------------

class Block:
    def __init__(self, value):
        self._value = value
    @property
    def value(self):
        return self._value
    # TODO: write your code here
    pass


class SuperBlock(Block):
    def __mul__(self, other):
        return Block(self._value*other._value)
    
    # TODO: write your code here
    pass


if __name__ == "__main__":
    import json
    input_args = json.loads(input())

    super_block_one = SuperBlock(input_args[0])
    super_block_two = SuperBlock(input_args[1])
    
    try:
        super_block_one._value
    except AttributeError:
        print("Missed protecting value")

    try:
        super_block_one.value = 1
        print("Missed setting safe access to value")
    except AttributeError:
        pass

    print(isinstance(super_block_one, SuperBlock))

    print(isinstance(super_block_one, Block))

    product_block = super_block_one * super_block_two

    print(isinstance(product_block, Block))
    print(isinstance(product_block, SuperBlock))
    print(product_block.value)

    block_four = Block(4)

    try:
        block_four * product_block
        print("Multiplication is not supported on Block objects")
    except TypeError:
        pass
        
        
   *-------------------------------------------*
   
   
   Task 5:
   
   Input:
2


Output:
True
True
+-+
|1|
+-+
+-+
|1|
+-+


---------------------------------------------------

class Block:
    def __init__(self, value):
        self._value = value
    @property
    def value(self):
        return self._value
    # TODO: write your code here
    pass


class SuperBlock(Block):
    def split(self):
        if self._value == 1:
            return [f"+-+\n|{self._value}|\n+-+"]
        elif self._value%2 == 0:
            length = len(str(int(self._value/2)))
            symbol = length*'-'
            return [f"+{symbol}+\n|{int(self._value/2)}|\n+{symbol}+", f"+{symbol}+\n|{int(self._value/2)}|\n+{symbol}+"]
        else:
            length_1 = len(str(int((self._value-1)/2)))
            symbol_1 = length_1*'-'
            length_2 = len(str(int((self._value+1)/2)))
            symbol_2 = length_2*'-'
            return [f"+{symbol_1}+\n|{int((self._value-1)/2)}|\n+{symbol_1}+", f"+{symbol_2}+\n|{int((self._value+1)/2)}|\n+{symbol_2}+"]
    # TODO: write your code here
    pass


if __name__ == "__main__":
    super_block_value = int(input())

    super_block_one = SuperBlock(super_block_value)

    try:
        super_block_one._value
    except AttributeError:
        print("Missed protecting value")

    try:
        super_block_one.value = 1
        print("Missed setting safe access to value")
    except AttributeError:
        pass

    print(isinstance(super_block_one, SuperBlock))

    try:
        print(isinstance(super_block_one, Block))
    except:
        print("You should use Block class to build SuperBlock")

    blocks = super_block_one.split()
    
    if len(blocks) > 1:
        print(blocks[0])
        print(blocks[1])
    else:
        print(blocks[0])
